org: aahmed31
app: serverless-bookquotes
service: serverless-bookquotes

frameworkVersion: '3'

custom:
  secrets: ${file(secrets.json)}
  slsLambdaRole: ${file(sls-lambda-role.json)}
  typesenseLambdaRole: ${file(typesense-lambda-role.json)}

provider:
  name: aws
  runtime: nodejs16.x
  stage: production
  region: us-east-2
  environment: # add environment property
    NODE_ENV: ${self:custom.secrets.NODE_ENV} 
    # reference the NODE_ENV from the secrets.json file
  apiName: book-quotes-api
  endpointType: regional
  logs:
    restApi:
      level: INFO
  # s3:
  #   bucketOne:
  #     name: book-quotes-sls
  #     versioningConfiguration:
  #       Status: Suspended
    # deploymentPrefix: ${service}
  # deploymentBucket: 
  #   name: book-quotes-sls
  #   blockPublicAccess: false
  #   versioning: false

resources:
  Resources:
    quoteTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: quote-table
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdDate
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH #partition key
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: createdDate-index
            KeySchema:
              - AttributeName: createdDate
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: '5'
              WriteCapacityUnits: '5'
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: '5'
              WriteCapacityUnits: '5'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    threadTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: thread-table
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: threadId
            AttributeType: S
        KeySchema:
          - AttributeName: threadId
            KeyType: HASH #partition key
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: postId-index
            KeySchema:
              - AttributeName: postId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: '5'
              WriteCapacityUnits: '5'
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user-table
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH #partition key
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

package:
  individually: true
  exclude:
    - ./**

functions:
  anyPath:
    handler: lambdas/any-lambda/index.handler # reference the file and exported method
    role: arn:aws:iam::341614884717:role/slsLambdaRoles
      # arn:
      #   Fn::GetAtt: [ serverless-lambda-role, Arn ]
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          cors: true
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/any-lambda/index.js
  proxyPath:
    handler: app.server # reference the file and exported method
    role: arn:aws:iam::341614884717:role/slsLambdaRoles
    events: # events trigger lambda functions
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          cors: true
    package:
      # Directories and files to include in the deployed package
      patterns:
        - app.js
  healthCheck:              
    handler: lambdas/healthCheck-lambda/index.handler
    role: arn:aws:iam::341614884717:role/slsLambdaRoles
    events:
      - http:
          path: /health
          method: GET
          cors: true
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/healthCheck-lambda/index.js
  quoteOps:  
    handler: lambdas/quote-lambda/index.handler
    role: arn:aws:iam::341614884717:role/slsLambdaRoles
    # !GetAtt slsLambdaRoles.Arn
    events:
      - http: 
          path: /quote
          method: GET
          cors: true 
      - http:
          path: /quote
          method: POST
          cors: true
      - http:
          path: /quote
          method: PATCH
          cors: true
      - http:
          path: /quote
          method: DELETE
          cors: true
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/quote-lambda/index.js
  quotesOps:  
    handler: lambdas/quotes-lambda/index.handler
    role: arn:aws:iam::341614884717:role/slsLambdaRoles
    events:
      - http: 
          path: /quotes
          method: GET
          cors: true 
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/quotes-lambda/index.js
  threadOps:  
    handler: lambdas/thread-lambda/index.handler
    role: arn:aws:iam::341614884717:role/slsLambdaRoles
    events:
      - http: 
          path: /thread
          method: GET
          cors: true 
      - http: 
          path: /thread
          method: POST
          cors: true
      - http: 
          path: /thread
          method: PATCH
          cors: true
      - http: 
          path: /thread
          method: DELETE
          cors: true
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/thread-lambda/index.js
  bookmarkOps:  
    handler: lambdas/bookmark-lambda/index.handler
    role: arn:aws:iam::341614884717:role/slsLambdaRoles
    events:
      - http: 
          path: /bookmark
          method: GET
          cors: true 
      - http: 
          path: /bookmark
          method: POST
          cors: true
      - http: 
          path: /bookmark
          method: DELETE
          cors: true
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/bookmark-lambda/index.js
  userOps:  
    handler: lambdas/user-lambda/index.handler
    role: arn:aws:iam::341614884717:role/slsLambdaRoles
    events:
      - http: 
          path: /user
          method: GET
          cors: true 
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/user-lambda/index.js
  typesenselambda:
    handler: lambdas/index.handler
    role: arn:aws:iam::341614884717:role/slsTypesenseLambdaRole
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/node_modules/**
        - lambdas/index.js
        - lambdas/package-lock.json
        - lambdas/package.json
  dbTrigger:
    handler: lambdas/dbTrigger-lambda/index.handler
    role: arn:aws:iam::341614884717:role/slsTypesenseLambdaRole
    # arn:aws:iam:us-east-2:341614884717:role/typesense-lambda-role
    package:
      # Directories and files to include in the deployed package
      patterns:
        - lambdas/dbTrigger-lambda/index.js
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [quoteTable, StreamArn]

